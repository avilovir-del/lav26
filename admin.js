let authToken = null;
const API_BASE = window.location.origin;

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
async function apiCall(endpoint, options = {}) {
    try {
        const response = await fetch(`${API_BASE}${endpoint}`, {
            headers: {
                'Content-Type': 'application/json',
                'Authorization': authToken,
                ...options.headers
            },
            ...options
        });

        if (response.status === 401) {
            logout();
            throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        }

        return await response.json();
    } catch (error) {
        console.error('API Error:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
        throw error;
    }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type = 'info') {
    if (type === 'error') {
        alert('‚ùå ' + message);
    } else {
        alert('‚úÖ ' + message);
    }
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
async function login() {
    const password = document.getElementById('admin-password').value;
    
    if (!password) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', 'error');
        return;
    }

    try {
        const result = await apiCall('/api/admin/login', {
            method: 'POST',
            body: JSON.stringify({ password })
        });

        if (result.success) {
            authToken = result.token;
            localStorage.setItem('adminToken', authToken);
            document.getElementById('login-screen').style.display = 'none';
            document.getElementById('admin-panel').style.display = 'block';
            loadDashboard();
        } else {
            showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å', 'error');
        }
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', 'error');
    }
}

// –í—ã—Ö–æ–¥
function logout() {
    authToken = null;
    localStorage.removeItem('adminToken');
    document.getElementById('login-screen').style.display = 'block';
    document.getElementById('admin-panel').style.display = 'none';
    document.getElementById('admin-password').value = '';
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è
function showSection(sectionName) {
    document.querySelectorAll('.section').forEach(section => {
        section.classList.remove('active');
    });
    
    document.getElementById(`section-${sectionName}`).classList.add('active');
    
    document.querySelectorAll('.nav-tabs button').forEach(button => {
        button.classList.remove('active');
    });
    event.target.classList.add('active');

    switch(sectionName) {
        case 'dashboard':
            loadDashboard();
            break;
        case 'submissions':
            loadSubmissions();
            break;
        case 'users':
            loadUsers();
            break;
        case 'tasks':
            loadTasks();
            break;
        case 'shop':
            loadShop();
            break;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞
async function loadDashboard() {
    try {
        const stats = await apiCall('/api/admin/stats');
        const users = await apiCall('/api/admin/users');
        
        const activeUsers = users.filter(user => {
            if (!user.lastActivity) return false;
            const lastActivity = new Date(user.lastActivity);
            const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
            return lastActivity > weekAgo;
        });

        const statsHTML = `
            <div class="stat-card">
                <div class="stat-number">${stats.totalUsers}</div>
                <div class="stat-label">üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">${stats.activeUsers}</div>
                <div class="stat-label">üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">${stats.totalSubmissions}</div>
                <div class="stat-label">üì∏ –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">${stats.pendingSubmissions}</div>
                <div class="stat-label">‚è≥ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">${stats.totalLavki}</div>
                <div class="stat-label">üíé –í—Å–µ–≥–æ –ª–∞–≤–æ–∫</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">${stats.activeTasks}</div>
                <div class="stat-label">üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π</div>
            </div>
        `;
        
        document.getElementById('stats-grid').innerHTML = statsHTML;
    } catch (error) {
        document.getElementById('stats-grid').innerHTML = '<div class="empty-state">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</div>';
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
async function loadSubmissions() {
    try {
        const submissions = await apiCall('/api/admin/submissions');
        const pendingSubmissions = submissions.filter(s => s.status === 'pending');
        
        if (pendingSubmissions.length === 0) {
            document.getElementById('submissions-list').innerHTML = `
                <div class="empty-state">
                    <div>üéâ</div>
                    <h3>–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É</h3>
                    <p>–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!</p>
                </div>
            `;
            return;
        }

        let submissionsHTML = '';
        pendingSubmissions.forEach(submission => {
            submissionsHTML += `
                <div class="submission-item">
                    <div class="submission-header">
                        <div>
                            <div class="submission-user">üë§ ${submission.userName}</div>
                            <div class="submission-task">üìã ${submission.taskName}</div>
                        </div>
                        <div>
                            <span class="status-badge status-pending">‚è≥ –û–∂–∏–¥–∞–µ—Ç</span>
                            <div style="margin-top: 5px; color: #7f8c8d; font-size: 12px;">
                                üíé +${submission.reward} –ª–∞–≤–æ–∫
                            </div>
                        </div>
                    </div>
                    
                    <img src="${submission.photo}" alt="–§–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è" class="submission-photo" 
                         onerror="this.src='https://via.placeholder.com/300x200/ECF0F1/666?text=–û—à–∏–±–∫–∞+–∑–∞–≥—Ä—É–∑–∫–∏+—Ñ–æ—Ç–æ'">
                    
                    <div class="submission-actions">
                        <button onclick="approveSubmission(${submission.id})" class="btn btn-approve">
                            ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å (+${submission.reward} –ª–∞–≤–æ–∫)
                        </button>
                        <button onclick="rejectSubmission(${submission.id})" class="btn btn-reject">
                            ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                        </button>
                    </div>
                </div>
            `;
        });
        
        document.getElementById('submissions-list').innerHTML = submissionsHTML;
    } catch (error) {
        document.getElementById('submissions-list').innerHTML = '<div class="empty-state">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π</div>';
    }
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
async function approveSubmission(submissionId) {
    if (!confirm('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –Ω–∞—á–∏—Å–ª–∏—Ç—å –ª–∞–≤–∫–∏?')) return;
    
    try {
        await apiCall(`/api/admin/submissions/${submissionId}/approve`, {
            method: 'POST'
        });
        
        showNotification('–ó–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! –õ–∞–≤–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã.');
        loadSubmissions();
        loadDashboard();
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è', 'error');
    }
}

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
async function rejectSubmission(submissionId) {
    if (!confirm('–û—Ç–∫–ª–æ–Ω–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ?')) return;
    
    try {
        await apiCall(`/api/admin/submissions/${submissionId}/reject`, {
            method: 'POST'
        });
        
        showNotification('–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.');
        loadSubmissions();
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è', 'error');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function loadUsers() {
    try {
        const users = await apiCall('/api/admin/users');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        document.getElementById('total-users').textContent = users.length;
        document.getElementById('total-lavki-users').textContent = users.reduce((sum, user) => sum + user.lavki, 0);
        
        const activeUsers = users.filter(user => {
            if (!user.lastActivity) return false;
            const lastActivity = new Date(user.lastActivity);
            const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
            return lastActivity > weekAgo;
        });
        document.getElementById('active-users').textContent = activeUsers.length;
        
        if (users.length === 0) {
            document.getElementById('users-list').innerHTML = `
                <div class="empty-state">
                    <div>üë•</div>
                    <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</h3>
                    <p>–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞—á–Ω—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
                </div>
            `;
            return;
        }

        let usersHTML = '';
        users.forEach(user => {
            const isActive = user.lastActivity && (new Date(user.lastActivity) > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000));
            
            usersHTML += `
                <div class="submission-item user-item" data-user-id="${user.id}" data-user-name="${user.id}">
                    <div class="submission-header">
                        <div>
                            <div class="submission-user">üë§ ID: ${user.id}</div>
                            <div style="display: flex; gap: 15px; margin-top: 5px; font-size: 14px;">
                                <span>üíé ${user.lavki} –ª–∞–≤–æ–∫</span>
                                <span>‚úÖ ${user.completedTasks || 0} –∑–∞–¥–∞–Ω–∏–π</span>
                                <span class="status-badge ${isActive ? 'status-approved' : 'status-rejected'}">
                                    ${isActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ö´ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                                </span>
                            </div>
                        </div>
                        <div style="text-align: right;">
                            <div style="color: #7f8c8d; font-size: 12px;">
                                üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${user.registrationDate ? new Date(user.registrationDate).toLocaleDateString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                            </div>
                            <div style="color: #7f8c8d; font-size: 12px; margin-top: 5px;">
                                üìç –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${user.lastActivity ? new Date(user.lastActivity).toLocaleDateString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                            </div>
                        </div>
                    </div>
                    
                    <div class="submission-actions">
                        <button onclick="viewUserDetails('${user.id}')" class="btn" style="background: #2196f3; color: white;">
                            üìä –î–µ—Ç–∞–ª–∏
                        </button>
                        <button onclick="editUserBalance('${user.id}', ${user.lavki})" class="btn" style="background: #ff9800; color: white;">
                            üíé –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
                        </button>
                    </div>
                </div>
            `;
        });
        
        document.getElementById('users-list').innerHTML = usersHTML;
    } catch (error) {
        document.getElementById('users-list').innerHTML = '<div class="empty-state">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>';
    }
}

// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function filterUsers() {
    const search = document.getElementById('user-search').value.toLowerCase();
    const userItems = document.querySelectorAll('.user-item');
    
    userItems.forEach(item => {
        const userName = item.getAttribute('data-user-name').toLowerCase();
        if (userName.includes(search)) {
            item.style.display = 'block';
        } else {
            item.style.display = 'none';
        }
    });
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function viewUserDetails(userId) {
    try {
        const userInfo = await apiCall(`/api/admin/users/${userId}`);
        
        const submissionsHTML = userInfo.submissions.map(sub => `
            <div style="border: 1px solid #eee; padding: 10px; margin: 5px 0; border-radius: 5px;">
                <div><strong>${sub.taskName}</strong> (+${sub.reward} –ª–∞–≤–æ–∫)</div>
                <div style="font-size: 12px; color: #666;">
                    –°—Ç–∞—Ç—É—Å: ${sub.status === 'approved' ? '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' : sub.status === 'pending' ? '‚è≥ –û–∂–∏–¥–∞–µ—Ç' : '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ'}
                    ‚Ä¢ ${new Date(sub.submittedAt).toLocaleDateString('ru-RU')}
                </div>
            </div>
        `).join('');
        
        const modalHTML = `
            <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: flex; justify-content: center; align-items: center; z-index: 10000;">
                <div style="background: white; padding: 30px; border-radius: 15px; max-width: 500px; width: 90%; max-height: 80vh; overflow-y: auto;">
                    <h3>üìä –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>
                    <div style="margin: 20px 0;">
                        <p><strong>ID:</strong> ${userInfo.id}</p>
                        <p><strong>üíé –ë–∞–ª–∞–Ω—Å:</strong> ${userInfo.lavki} –ª–∞–≤–æ–∫</p>
                        <p><strong>‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π:</strong> ${userInfo.completedTasks}</p>
                        <p><strong>üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</strong> ${userInfo.registrationDate ? new Date(userInfo.registrationDate).toLocaleDateString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
                        <p><strong>üìä –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–æ–∫:</strong> ${userInfo.totalSubmissions}</p>
                        <p><strong>‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ:</strong> ${userInfo.approvedSubmissions}</p>
                        <p><strong>‚è≥ –û–∂–∏–¥–∞–µ—Ç:</strong> ${userInfo.pendingSubmissions}</p>
                    </div>
                    
                    <h4>üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞–Ω–∏–π:</h4>
                    <div style="max-height: 200px; overflow-y: auto;">
                        ${submissionsHTML || '<p>–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</p>'}
                    </div>
                    
                    <div style="margin-top: 20px; text-align: center;">
                        <button onclick="closeModal()" class="btn" style="background: #666; color: white;">–ó–∞–∫—Ä—ã—Ç—å</button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalHTML);
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
    }
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function editUserBalance(userId, currentBalance) {
    const newBalance = prompt(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, currentBalance);
    
    if (newBalance === null) return;
    
    const balance = parseInt(newBalance);
    if (isNaN(balance) || balance < 0) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ', 'error');
        return;
    }
    
    try {
        await apiCall(`/api/admin/users/${userId}/balance`, {
            method: 'PUT',
            body: JSON.stringify({ lavki: balance })
        });
        
        showNotification('–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω!');
        loadUsers();
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', 'error');
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal() {
    const modal = document.querySelector('[style*="position: fixed; top: 0; left: 0; width: 100%"]');
    if (modal) {
        modal.remove();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π
async function loadTasks() {
    try {
        const tasks = await apiCall('/api/admin/tasks');
        
        let tasksHTML = '';
        tasks.forEach(task => {
            tasksHTML += `
                <div class="submission-item">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <h4>${task.name}</h4>
                            <p>üíé –ù–∞–≥—Ä–∞–¥–∞: ${task.reward} –ª–∞–≤–æ–∫</p>
                            <span class="status-badge ${task.active ? 'status-approved' : 'status-rejected'}">
                                ${task.active ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}
                            </span>
                        </div>
                        <div>
                            <button onclick="toggleTask(${task.id}, ${!task.active})" class="btn" 
                                    style="background: ${task.active ? '#ff9800' : '#4caf50'}; color: white; margin: 2px;">
                                ${task.active ? '‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
                            </button>
                        </div>
                    </div>
                </div>
            `;
        });
        
        document.getElementById('tasks-list').innerHTML = tasksHTML;
    } catch (error) {
        document.getElementById('tasks-list').innerHTML = '<div class="empty-state">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π</div>';
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
async function addNewTask() {
    const name = document.getElementById('new-task-name').value;
    const reward = document.getElementById('new-task-reward').value;
    
    if (!name || !reward) {
        showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
        return;
    }
    
    try {
        await apiCall('/api/admin/tasks', {
            method: 'POST',
            body: JSON.stringify({ name, reward: parseInt(reward) })
        });
        
        showNotification('–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
        document.getElementById('new-task-name').value = '';
        document.getElementById('new-task-reward').value = '';
        loadTasks();
        loadDashboard();
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è', 'error');
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏—è
async function toggleTask(taskId, active) {
    try {
        await apiCall(`/api/admin/tasks/${taskId}`, {
            method: 'PUT',
            body: JSON.stringify({ active })
        });
        
        showNotification(`–ó–∞–¥–∞–Ω–∏–µ ${active ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ'}`);
        loadTasks();
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è', 'error');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞
async function loadShop() {
    try {
        const shopItems = await apiCall('/api/admin/shop');
        
        let shopHTML = '';
        shopItems.forEach(item => {
            shopHTML += `
                <div class="submission-item">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <h4>${item.name}</h4>
                            <p>üíé –¶–µ–Ω–∞: ${item.price} –ª–∞–≤–æ–∫</p>
                            <span class="status-badge ${item.active ? 'status-approved' : 'status-rejected'}">
                                ${item.active ? '‚úÖ –í –ø—Ä–æ–¥–∞–∂–µ' : '‚ùå –ù–µ –ø—Ä–æ–¥–∞–µ—Ç—Å—è'}
                            </span>
                        </div>
                        <div>
                            <button onclick="toggleShopItem(${item.id}, ${!item.active})" class="btn" 
                                    style="background: ${item.active ? '#ff9800' : '#4caf50'}; color: white; margin: 2px;">
                                ${item.active ? '‚ùå –°–Ω—è—Ç—å —Å –ø—Ä–æ–¥–∞–∂–∏' : '‚úÖ –í–µ—Ä–Ω—É—Ç—å –≤ –ø—Ä–æ–¥–∞–∂—É'}
                            </button>
                        </div>
                    </div>
                </div>
            `;
        });
        
        document.getElementById('shop-list').innerHTML = shopHTML;
    } catch (error) {
        document.getElementById('shop-list').innerHTML = '<div class="empty-state">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞</div>';
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
async function addNewShopItem() {
    const name = document.getElementById('new-item-name').value;
    const price = document.getElementById('new-item-price').value;
    
    if (!name || !price) {
        showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
        return;
    }
    
    try {
        await apiCall('/api/admin/shop', {
            method: 'POST',
            body: JSON.stringify({ name, price: parseInt(price) })
        });
        
        showNotification('–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!');
        document.getElementById('new-item-name').value = '';
        document.getElementById('new-item-price').value = '';
        loadShop();
        loadDashboard();
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞', 'error');
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
async function toggleShopItem(itemId, active) {
    try {
        await apiCall(`/api/admin/shop/${itemId}`, {
            method: 'PUT',
            body: JSON.stringify({ active })
        });
        
        showNotification(`–¢–æ–≤–∞—Ä ${active ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–¥–∞–∂—É' : '—Å–Ω—è—Ç —Å –ø—Ä–æ–¥–∞–∂–∏'}`);
        loadShop();
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞', 'error');
    }
}

// –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
async function changePassword() {
    const newPassword = document.getElementById('new-password').value;
    const confirmPassword = document.getElementById('confirm-password').value;
    
    if (!newPassword || !confirmPassword) {
        showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
        return;
    }
    
    if (newPassword !== confirmPassword) {
        showNotification('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'error');
        return;
    }
    
    if (newPassword.length < 4) {
        showNotification('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 4 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
        return;
    }
    
    try {
        await apiCall('/api/admin/change-password', {
            method: 'POST',
            body: JSON.stringify({ newPassword })
        });
        
        showNotification('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!');
        document.getElementById('new-password').value = '';
        document.getElementById('confirm-password').value = '';
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è', 'error');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    const savedToken = localStorage.getItem('adminToken');
    if (savedToken) {
        authToken = savedToken;
        document.getElementById('login-screen').style.display = 'none';
        document.getElementById('admin-panel').style.display = 'block';
        loadDashboard();
    }
});
