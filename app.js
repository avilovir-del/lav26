// =====================
// üåê –ù–ê–°–¢–†–û–ô–ö–ò –°–ï–†–í–ï–†–ê
// =====================
const API_BASE = window.location.origin;

// =====================
// üåü –ù–ê–í–ò–ì–ê–¶–ò–Ø
// =====================
function showScreen(name) {
  document.querySelectorAll('.screen').forEach(screen => {
    screen.classList.remove('active');
  });

  const screen = document.getElementById(`screen-${name}`);
  if (screen) {
    screen.classList.add('active');
    
    if (name === 'character') {
      setTimeout(liftCharacterImage, 50);
    } else if (name === 'tasks') {
      // –ü–†–û–í–ï–†–Ø–ï–ú –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç–∫—Ä–∞–Ω–∞ –∑–∞–¥–∞–Ω–∏–π
      setTimeout(checkApprovedTasks, 1000);
      setTimeout(checkRejectedTasks, 1000);
      setTimeout(loadTasksFromServer, 1000); // –î–û–ë–ê–í–õ–ï–ù–û: –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    } else if (name === 'shop') {
      setTimeout(() => {
        loadShopItems();
      }, 100);
    } else if (name === 'settings') {
      setTimeout(() => {
        loadUserPurchases();
      }, 100);
    }
    
    setTimeout(() => {
      updateStats();
      if (name === 'character') {
        updateCharacterDisplay();
      }
    }, 50);
  }
}

// =====================
// üíé –õ–ê–í–ö–ò
// =====================
let lavki = parseInt(localStorage.getItem('lavki')) || 0;

function updateLavki() {
  const lavkiAmount = document.getElementById('lavki-amount');
  if (lavkiAmount) {
    lavkiAmount.textContent = lavki;
  }
  localStorage.setItem('lavki', lavki);
}

// =====================
// üõçÔ∏è –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–û–ö–£–ü–û–ö
// =====================

async function loadShopItems() {
  try {
    const response = await fetch(`${API_BASE}/api/shop`);
    if (response.ok) {
      const shopItems = await response.json();
      updateShopDisplay(shopItems);
      localStorage.setItem('shopItems', JSON.stringify(shopItems));
    }
  } catch (error) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ:', error);
    const savedItems = localStorage.getItem('shopItems');
    if (savedItems) {
      updateShopDisplay(JSON.parse(savedItems));
    }
  }
}

function updateShopDisplay(shopItems) {
  const shopContainer = document.getElementById('shop-items');
  if (!shopContainer) return;
  
  let shopHTML = '';
  
  const activeItems = shopItems.filter(item => item.active);
  if (activeItems.length === 0) {
    shopHTML = `
      <div class="shop">
        <div style="text-align: center; color: #666; padding: 20px;">
          üè™ –ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç
          <br>
          <small>–¢–æ–≤–∞—Ä—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ–∑–∂–µ</small>
        </div>
      </div>
    `;
  } else {
    activeItems.forEach(item => {
      shopHTML += `
        <div class="shop">
          <div>${item.name} ‚Äî ${item.price} –ª–∞–≤–æ–∫</div>
          <button onclick="buyItem('${item.name}', ${item.price}, ${item.id})">–ö—É–ø–∏—Ç—å</button>
        </div>
      `;
    });
  }
  
  shopContainer.innerHTML = shopHTML;
}

// =====================
// üë§ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
// =====================

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
function getUserInfo() {
  const tg = window.Telegram?.WebApp;
  if (tg && tg.initDataUnsafe?.user) {
    const user = tg.initDataUnsafe.user;
    return {
      id: user.id.toString(),
      firstName: user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
      lastName: user.last_name || '',
      username: user.username ? `@${user.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω',
      language: user.language_code || 'ru',
      fullName: [user.first_name, user.last_name].filter(Boolean).join(' '),
      contact: user.username ? `@${user.username}` : `ID: ${user.id}`
    };
  }
  return {
    id: `user_${Date.now()}`,
    firstName: '–ê–Ω–æ–Ω–∏–º',
    username: '–ù–µ —É–∫–∞–∑–∞–Ω',
    fullName: '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    contact: '–ù–µ —É–∫–∞–∑–∞–Ω'
  };
}

// –î–û–ë–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ
async function initializeUser() {
  try {
    const userInfo = getUserInfo();
    const response = await fetch(`${API_BASE}/api/initialize-user`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        userId: userInfo.id,
        userName: userInfo.fullName,
        userContact: userInfo.contact
      })
    });

    if (response.ok) {
      const result = await response.json();
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', result);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å —Å–µ—Ä–≤–µ—Ä–∞
      const balanceResponse = await fetch(`${API_BASE}/api/user/${userInfo.id}/balance`);
      if (balanceResponse.ok) {
        const balanceData = await balanceResponse.json();
        lavki = balanceData.lavki;
        updateLavki();
      }
    }
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
}

async function buyItem(itemName, cost, itemId) {
  if (lavki >= cost) {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    const userInfo = getUserInfo();
    
    if (confirm(`–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É "${itemName}" –∑–∞ ${cost} –ª–∞–≤–æ–∫?`)) {
      try {
        const response = await fetch(`${API_BASE}/api/buy-item`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            itemId: itemId,
            itemName: itemName,
            price: cost,
            userId: userInfo.id,
            userName: userInfo.fullName,
            userContact: userInfo.contact
          })
        });

        if (response.ok) {
          // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –ª–∞–≤–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ
          lavki -= cost;
          updateLavki();
          
          showNotification(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É "${itemName}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`, 'success');
        } else {
          throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
      } catch (error) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–∞–≤–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        lavki += cost;
        updateLavki();
        showNotification('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏', 'error');
      }
    }
  } else {
    showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∞–≤–æ–∫ üíé', 'error');
  }
}

function refreshShop() {
  showNotification('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω...', 'info');
  loadShopItems();
}

// =====================
// üõí –ë–õ–û–ö –ü–û–ö–£–ü–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
// =====================

async function loadUserPurchases() {
  try {
    const userInfo = getUserInfo();
    const response = await fetch(`${API_BASE}/api/user/${userInfo.id}/purchases`);
    
    if (response.ok) {
      const purchases = await response.json();
      updatePurchasesDisplay(purchases);
    }
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∫—É–ø–æ–∫:', error);
    document.getElementById('user-purchases-list').innerHTML = `
      <div style="text-align: center; color: #666; padding: 20px;">
        ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∫—É–ø–æ–∫
      </div>
    `;
  }
}

function updatePurchasesDisplay(purchases) {
  const purchasesContainer = document.getElementById('user-purchases-list');
  if (!purchasesContainer) return;
  
  if (purchases.length === 0) {
    purchasesContainer.innerHTML = `
      <div style="text-align: center; color: #666; padding: 20px;">
        üõí –ü–æ–∫—É–ø–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç
        <br>
        <small>–ö—É–ø–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ!</small>
      </div>
    `;
    return;
  }
  
  let purchasesHTML = '';
  purchases.forEach(purchase => {
    purchasesHTML += `
      <div style="background: white; padding: 15px; margin: 10px 0; border-radius: 10px; border-left: 4px solid #4caf50;">
        <div style="font-weight: bold; margin-bottom: 5px;">${purchase.itemName}</div>
        <div style="color: #666; font-size: 14px;">
          üíé ${purchase.price} –ª–∞–≤–æ–∫ ‚Ä¢ 
          üìÖ ${new Date(purchase.purchasedAt).toLocaleDateString('ru-RU')}
        </div>
      </div>
    `;
  });
  
  purchasesContainer.innerHTML = purchasesHTML;
}

// =====================
// ‚öôÔ∏è –°–ò–°–¢–ï–ú–ê –ù–ê–°–¢–†–û–ï–ö
// =====================

function saveSettings() {
  const nameInput = document.getElementById('char-name');
  const name = nameInput ? nameInput.value.trim() : '';
  
  if (!name) {
    alert('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
    nameInput.focus();
    return;
  }
  
  if (name.length < 2) {
    alert('‚ö†Ô∏è –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞');
    return;
  }
  
  localStorage.setItem('charName', name);
  updateCharacterDisplay();
  showSuccessMessage('–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! üéâ');
}

function updateCharacterDisplay() {
  const name = localStorage.getItem('charName') || '–õ–∞–≤—á–∏–∫';
  const nameDisplay = document.getElementById('character-name-display');
  const statusDisplay = document.getElementById('character-status');
  
  if (nameDisplay) {
    nameDisplay.textContent = name;
  }
  
  if (statusDisplay) {
    const statuses = [
      '–°—á–∞—Å—Ç–ª–∏–≤ –∏ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º! üòÑ',
      '–†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å! ‚ú®',
      '–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –∑–∞–¥–∞–Ω–∏—è–º! üöÄ',
      '–ù–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ–∑–∏—Ç–∏–≤–Ω–æ! üåü'
    ];
    const randomStatus = statuses[Math.floor(Math.random() * statuses.length)];
    statusDisplay.textContent = randomStatus;
  }
}

function loadCharacterName() {
  const savedName = localStorage.getItem('charName');
  const nameInput = document.getElementById('char-name');
  
  if (savedName && nameInput) {
    nameInput.value = savedName;
  } else {
    nameInput.value = '–õ–∞–≤—á–∏–∫';
  }
  updateCharacterDisplay();
}

function initializeCharacterSelector() {
  const selector = document.getElementById('character-selector');
  const currentCharacter = localStorage.getItem('characterImg') || 'images/1.png';
  
  if (selector) {
    const options = selector.querySelectorAll('.character-option');
    options.forEach(option => {
      const imgPath = option.getAttribute('data-img');
      option.addEventListener('click', () => changeCharacter(imgPath));
      
      if (imgPath === currentCharacter) {
        option.classList.add('selected');
      }
    });
  }
}

function changeCharacter(imgPath) {
  const img = document.getElementById('character-img');
  if (img) {
    img.src = imgPath;
    localStorage.setItem('characterImg', imgPath);
    
    const options = document.querySelectorAll('.character-option');
    options.forEach(option => {
      option.classList.remove('selected');
      if (option.getAttribute('data-img') === imgPath) {
        option.classList.add('selected');
      }
    });
    
    showSuccessMessage('–í–Ω–µ—à–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑–º–µ–Ω–µ–Ω–∞! üëó');
  }
}

function loadCharacter() {
  const savedImg = localStorage.getItem('characterImg');
  const characterImg = document.getElementById('character-img');
  if (savedImg && characterImg) {
    characterImg.src = savedImg;
  }
}

function updateStats() {
  const totalLavki = document.getElementById('total-lavki');
  const completedTasks = document.getElementById('completed-tasks');
  const creationDate = document.getElementById('creation-date');
  
  if (totalLavki) {
    totalLavki.textContent = lavki;
  }
  
  if (completedTasks) {
    const completedCount = tasks.filter(task => task.completed).length;
    completedTasks.textContent = `${completedCount} –∏–∑ ${tasks.length}`;
  }
  
  if (creationDate) {
    let creation = localStorage.getItem('creationDate');
    if (!creation) {
      creation = new Date().toLocaleDateString('ru-RU');
      localStorage.setItem('creationDate', creation);
    }
    creationDate.textContent = creation;
  }
}

function showSuccessMessage(message) {
  const toast = document.createElement('div');
  toast.textContent = message;
  toast.style.cssText = `
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: #4caf50;
    color: white;
    padding: 12px 20px;
    border-radius: 25px;
    font-weight: 600;
    z-index: 1000;
    animation: slideIn 0.3s ease;
    box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3);
  `;
  
  document.body.appendChild(toast);
  
  setTimeout(() => {
    toast.style.animation = 'slideIn 0.3s ease reverse';
    setTimeout(() => {
      document.body.removeChild(toast);
    }, 300);
  }, 2000);
}

// =====================
// üìã –°–ò–°–¢–ï–ú–ê –ó–ê–î–ê–ù–ò–ô
// =====================

let tasks = [];

// –î–û–ë–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
async function loadTasksFromServer() {
  try {
    const response = await fetch(`${API_BASE}/api/tasks`);
    if (response.ok) {
      const serverTasks = await response.json();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π
      const currentProgress = tasks.reduce((acc, task) => {
        acc[task.id] = {
          completed: task.completed,
          userPhoto: task.userPhoto,
          pendingApproval: task.pendingApproval,
          wasRejected: task.wasRejected
        };
        return acc;
      }, {});
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      tasks = serverTasks.map(serverTask => {
        const progress = currentProgress[serverTask.id];
        if (progress) {
          return {
            ...serverTask,
            completed: progress.completed,
            userPhoto: progress.userPhoto,
            pendingApproval: progress.pendingApproval,
            wasRejected: progress.wasRejected
          };
        }
        return { 
          ...serverTask, 
          completed: false, 
          userPhoto: null, 
          pendingApproval: false, 
          wasRejected: false 
        };
      });
      
      saveTasksToStorage();
      renderTasks();
      console.log('–ó–∞–¥–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º:', tasks);
    }
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
  }
}

function initializeTasks() {
  const savedTasks = localStorage.getItem('tasks');
  
  if (savedTasks) {
    try {
      const parsedTasks = JSON.parse(savedTasks);
      tasks = parsedTasks;
      console.log('–ó–∞–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage:', tasks);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π:', e);
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
      loadTasksFromServer();
    }
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
    loadTasksFromServer();
  }
}

function saveTasksToStorage() {
  try {
    localStorage.setItem('tasks', JSON.stringify(tasks));
    console.log('–ó–∞–¥–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', tasks);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π:', e);
  }
}

// =====================
// –†–ï–ù–î–ï–† –ó–ê–î–ê–ù–ò–ô
// =====================
function renderTasks() {
  const list = document.getElementById('task-list');
  if (!list) {
    console.error('–≠–ª–µ–º–µ–Ω—Ç task-list –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  list.innerHTML = '';

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
  const activeTasks = tasks.filter(task => task.active);
  
  if (activeTasks.length === 0) {
    list.innerHTML = `
      <div style="text-align: center; color: #666; padding: 40px;">
        üìù –ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç
        <br>
        <small>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏—Ç –∑–∞–¥–∞–Ω–∏—è –ø–æ–∑–∂–µ</small>
      </div>
    `;
    return;
  }

  activeTasks.forEach((task, i) => {
    const li = document.createElement('li');
    li.className = 'task-item';
    
    if (task.completed) {
      li.style.background = '#f8fff8';
      li.style.borderLeft = '4px solid #4caf50';
    } else if (task.pendingApproval) {
      li.style.background = '#fff3cd';
      li.style.borderLeft = '4px solid #ff9800';
    } else if (task.wasRejected) {
      li.style.background = '#ffeaa7';
      li.style.borderLeft = '4px solid #e17055';
    }

    const divName = document.createElement('div');
    divName.style.fontWeight = 'bold';
    divName.style.marginBottom = '10px';
    
    if (task.completed) {
      divName.innerHTML = `‚úÖ <s>${task.name}</s>`;
    } else if (task.pendingApproval) {
      divName.innerHTML = `‚è≥ ${task.name} (–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ)`;
    } else if (task.wasRejected) {
      divName.innerHTML = `üîÑ ${task.name} (–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞)`;
    } else {
      divName.innerHTML = `üìù ${task.name}`;
    }
    
    li.appendChild(divName);

    if (task.completed && task.userPhoto) {
      const userImgContainer = document.createElement('div');
      userImgContainer.style.marginTop = '10px';
      
      const userLabel = document.createElement('div');
      userLabel.textContent = 'üì∏ –í–∞—à–µ —Ñ–æ—Ç–æ:';
      userLabel.style.fontWeight = 'bold';
      userLabel.style.marginBottom = '5px';
      userLabel.style.color = '#2e7d32';
      userImgContainer.appendChild(userLabel);
      
      const userImg = document.createElement('img');
      userImg.src = task.userPhoto;
      userImg.alt = "–í–∞—à–µ —Ñ–æ—Ç–æ";
      userImg.style.width = '100%';
      userImg.style.maxHeight = '200px';
      userImg.style.borderRadius = '8px';
      userImg.style.border = '2px solid #4caf50';
      userImg.style.objectFit = 'cover';
      userImg.style.boxShadow = '0 2px 8px rgba(76, 175, 80, 0.3)';
      userImgContainer.appendChild(userImg);
      
      li.appendChild(userImgContainer);
    }

    const btnContainer = document.createElement('div');
    btnContainer.className = 'task-buttons';

    if (!task.completed && !task.pendingApproval) {
      const fileInput = document.createElement('input');
      fileInput.type = 'file';
      fileInput.accept = 'image/*';
      fileInput.style.display = 'none';
      fileInput.id = `file-input-${i}`;
      
      fileInput.addEventListener('change', function(e) {
        handleImageUpload(e, task.id);
      });

      const uploadBtn = document.createElement('button');
      uploadBtn.className = 'complete';
      
      if (task.wasRejected) {
        uploadBtn.textContent = `üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞ (+${task.reward} –ª–∞–≤–æ–∫)`;
        uploadBtn.style.background = '#e17055';
      } else {
        uploadBtn.textContent = `–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ (+${task.reward} –ª–∞–≤–æ–∫)`;
      }
      
      uploadBtn.onclick = () => {
        console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:', task.id);
        fileInput.click();
      };

      btnContainer.appendChild(fileInput);
      btnContainer.appendChild(uploadBtn);
    } else if (task.pendingApproval) {
      const pendingText = document.createElement('span');
      pendingText.textContent = '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏';
      pendingText.style.color = '#ff9800';
      pendingText.style.fontWeight = 'bold';
      btnContainer.appendChild(pendingText);
    } else {
      const completedText = document.createElement('span');
      completedText.textContent = '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ';
      completedText.style.color = '#4caf50';
      completedText.style.fontWeight = 'bold';
      btnContainer.appendChild(completedText);
    }

    li.appendChild(btnContainer);
    list.appendChild(li);
  });
  
  updateStats();
  console.log('–ó–∞–¥–∞–Ω–∏—è –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω—ã:', activeTasks);
}

// =====================
// –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ì–†–£–ó–ö–ò –§–û–¢–û
// =====================
function handleImageUpload(event, taskId) {
  console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ID:', taskId);
  const file = event.target.files[0];
  if (!file) {
    console.log('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
    return;
  }

  if (!file.type.match('image.*')) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    return;
  }

  if (file.size > 5 * 1024 * 1024) {
    alert('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB');
    return;
  }

  const reader = new FileReader();
  
  reader.onload = function(e) {
    const imageDataUrl = e.target.result;
    console.log('–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –¥–∞–Ω–Ω—ã–µ URL –ø–æ–ª—É—á–µ–Ω—ã');
    
    completeTaskWithPhoto(taskId, imageDataUrl);
  };
  
  reader.onerror = function() {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞');
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞');
  };
  
  reader.readAsDataURL(file);
}

// =====================
// üì§ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ó–ê–î–ê–ù–ò–ô
// =====================

async function completeTaskWithPhoto(taskId, photoDataUrl) {
  console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä ID:', taskId);
  
  try {
    const userInfo = getUserInfo();
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Ä–∞–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ
    const taskIndex = tasks.findIndex(t => t.id === taskId);
    if (taskIndex !== -1 && tasks[taskIndex].wasRejected) {
      // –£–±–∏—Ä–∞–µ–º –ø–æ–º–µ—Ç–∫—É –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
      tasks[taskIndex].wasRejected = false;
    }
    
    const response = await fetch(`${API_BASE}/api/submit-task`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        taskId: taskId,
        photo: photoDataUrl,
        userId: userInfo.id,
        userName: userInfo.fullName,
        userContact: userInfo.contact
      })
    });

    if (response.ok) {
      const result = await response.json();
      console.log('–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É:', result);
      
      showNotification('üì∏ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ª–∞–≤–æ–∫.', 'success');
      markTaskAsPending(taskId);
    } else {
      throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
  } catch (error) {
    console.log('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ:', error);
    
    const taskIndex = tasks.findIndex(t => t.id === taskId);
    if (taskIndex !== -1) {
      tasks[taskIndex].userPhoto = photoDataUrl;
      tasks[taskIndex].completed = true;
      tasks[taskIndex].pendingApproval = true;
      
      lavki += tasks[taskIndex].reward;
      updateLavki();
      saveTasksToStorage();
      renderTasks();
      animateCharacterReward();
      
      alert(`–ó–∞–¥–∞–Ω–∏–µ "${tasks[taskIndex].name}" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ ${tasks[taskIndex].reward} –ª–∞–≤–æ–∫ üíé\n(—Ä–µ–∂–∏–º –æ—Ñ—Ñ–ª–∞–π–Ω)`);
    }
  }
}

function markTaskAsPending(taskId) {
  const taskIndex = tasks.findIndex(t => t.id === taskId);
  if (taskIndex !== -1) {
    tasks[taskIndex].pendingApproval = true;
    tasks[taskIndex].completed = false;
    // –£–±–∏—Ä–∞–µ–º –ø–æ–º–µ—Ç–∫—É –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–∏ –Ω–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
    tasks[taskIndex].wasRejected = false;
    saveTasksToStorage();
    renderTasks();
  }
}

// =====================
// üîÑ –ü–†–û–í–ï–†–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ù–´–• –ó–ê–î–ê–ù–ò–ô
// =====================

async function checkApprovedTasks() {
  try {
    const userInfo = getUserInfo();
    const userId = userInfo.id;
    
    if (!userId) return;

    const response = await fetch(`${API_BASE}/api/user/${userId}/approved-tasks`);
    if (response.ok) {
      const approvedTasks = await response.json();
      
      if (approvedTasks.length > 0) {
        approvedTasks.forEach(task => {
          // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
          const taskIndex = tasks.findIndex(t => t.id === task.taskId);
          if (taskIndex !== -1 && !tasks[taskIndex].completed) {
            // –ù–∞—á–∏—Å–ª—è–µ–º –ª–∞–≤–∫–∏
            lavki += tasks[taskIndex].reward;
            tasks[taskIndex].completed = true;
            tasks[taskIndex].pendingApproval = false;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            showNotification(`üéâ –ó–∞–¥–∞–Ω–∏–µ "${tasks[taskIndex].name}" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ ${tasks[taskIndex].reward} –ª–∞–≤–æ–∫`, 'success');
            animateCharacterReward();
          }
        });
        
        updateLavki();
        saveTasksToStorage();
        renderTasks();
      }
    }
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', error);
  }
}

// =====================
// üîÑ –ü–†–û–í–ï–†–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ù–´–• –ó–ê–î–ê–ù–ò–ô
// =====================

async function checkRejectedTasks() {
  try {
    const userInfo = getUserInfo();
    const userId = userInfo.id;
    
    if (!userId) return;

    const response = await fetch(`${API_BASE}/api/user/${userId}/rejected-tasks`);
    if (response.ok) {
      const rejectedTasks = await response.json();
      
      if (rejectedTasks.length > 0) {
        rejectedTasks.forEach(task => {
          // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
          const taskIndex = tasks.findIndex(t => t.id === task.taskId);
          if (taskIndex !== -1) {
            tasks[taskIndex].completed = false;
            tasks[taskIndex].pendingApproval = false;
            tasks[taskIndex].userPhoto = null;
            tasks[taskIndex].wasRejected = true; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–µ
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            showNotification(`‚ùå –ó–∞–¥–∞–Ω–∏–µ "${tasks[taskIndex].name}" –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${task.rejectionReason}`, 'error');
          }
        });
        
        saveTasksToStorage();
        renderTasks();
      }
    }
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', error);
  }
}

// –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π
function startTasksSync() {
  setInterval(() => {
    loadTasksFromServer();
  }, 30000); // 30 —Å–µ–∫—É–Ω–¥
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
function startTaskChecking() {
  setInterval(() => {
    checkApprovedTasks();
    checkRejectedTasks(); // –î–û–ë–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
  }, 30000); // 30 —Å–µ–∫—É–Ω–¥
}

// =====================
// –ê–ù–ò–ú–ê–¶–ò–Ø –ü–ï–†–°–û–ù–ê–ñ–ê
// =====================
function animateCharacterReward() {
  const img = document.getElementById('character-img');
  if (img) {
    img.classList.add('bounce');
    setTimeout(() => img.classList.remove('bounce'), 1000);
  }
}

// =====================
// –î–ï–ë–ê–ì –§–£–ù–ö–¶–ò–ò
// =====================
function debugTasks() {
  console.log('–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è:', tasks);
  console.log('LocalStorage tasks:', localStorage.getItem('tasks'));
}

window.debugTasks = debugTasks;

// =====================
// üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø
// =====================

function initializeDisplayValues() {
  updateLavki();
  updateCharacterDisplay();
  updateStats();
  
  const foodElement = document.getElementById('food');
  const energyElement = document.getElementById('energy');
  const funElement = document.getElementById('fun');
  
  if (foodElement && !foodElement.textContent) foodElement.textContent = '80';
  if (energyElement && !energyElement.textContent) energyElement.textContent = '60';
  if (funElement && !funElement.textContent) funElement.textContent = '40';
}

function checkImages() {
  const images = document.querySelectorAll('img');
  images.forEach(img => {
    img.onerror = function() {
      console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', this.src);
      this.src = 'https://via.placeholder.com/200x200/ECF0F1/666?text=üéÆ';
    };
  });
}

function liftCharacterImage() {
  const characterScreen = document.getElementById('screen-character');
  const characterImg = document.getElementById('character-img');
  const characterHeader = document.querySelector('.character-header');
  
  if (characterScreen && characterImg && characterHeader) {
    characterHeader.style.marginBottom = '0px';
    characterHeader.style.paddingBottom = '0px';
    
    const screenHeight = window.innerHeight;
    const navHeight = 60;
    const headerHeight = characterHeader.offsetHeight;
    const needsHeight = characterScreen.querySelector('.needs-overlay').offsetHeight;
    
    const availableHeight = screenHeight - navHeight - headerHeight - needsHeight - 10;
    
    characterImg.style.maxHeight = `${Math.max(250, availableHeight)}px`;
    
    characterScreen.style.gap = '0';
    characterScreen.style.rowGap = '0';
  }
}

// =====================
// üîÑ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –° –°–ï–†–í–ï–†–û–ú
// =====================

async function initializeWithServer() {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
    await loadTasksFromServer();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞
    await loadShopItems();
    
  } catch (error) {
    console.log('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ:', error);
  }
}

// =====================
// üîî –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
// =====================

function showNotification(message, type = 'info') {
  const notification = document.createElement('div');
  notification.textContent = message;
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: ${type === 'success' ? '#4caf50' : type === 'error' ? '#f44336' : '#2196f3'};
    color: white;
    padding: 12px 24px;
    border-radius: 25px;
    font-weight: 600;
    z-index: 10000;
    animation: slideIn 0.3s ease;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    max-width: 90%;
    text-align: center;
  `;
  
  document.body.appendChild(notification);
  
  setTimeout(() => {
    notification.style.animation = 'slideOut 0.3s ease forwards';
    setTimeout(() => {
      if (document.body.contains(notification)) {
        document.body.removeChild(notification);
      }
    }, 300);
  }, 3000);
}

// =====================
// üöÄ –û–°–ù–û–í–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// =====================

document.addEventListener('DOMContentLoaded', () => {
  const navButtons = document.querySelectorAll('.nav button');
  navButtons.forEach(button => {
    button.addEventListener('click', () => {
      const target = button.dataset.target;
      showScreen(target);

      navButtons.forEach(b => b.classList.remove('active'));
      button.classList.add('active');
    });
  });

  showScreen('character');
  if (navButtons[0]) navButtons[0].classList.add('active');

  loadCharacter();
  updateLavki();
  initializeTasks();
  renderTasks();
  loadCharacterName();
  initializeCharacterSelector();
  initializeDisplayValues();
  checkImages();
  
  // –î–û–ë–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  setTimeout(() => {
    initializeUser();
  }, 500);
  
  setTimeout(() => {
    updateLavki();
    updateCharacterDisplay();
    updateStats();
  }, 100);

  setTimeout(() => {
    initializeWithServer();
  }, 1000);
  
  // =====================
  // üîÑ –ó–ê–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ù–´–• –ó–ê–î–ê–ù–ò–ô
  // =====================
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
  setTimeout(() => {
    startTaskChecking();
    startTasksSync(); // –î–û–ë–ê–í–õ–ï–ù–û: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π
    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    setTimeout(checkApprovedTasks, 5000);
    setTimeout(checkRejectedTasks, 5000);
  }, 2000);
});

document.addEventListener('DOMContentLoaded', function() {
  setTimeout(liftCharacterImage, 100);
  window.addEventListener('resize', liftCharacterImage);
});

// –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const style = document.createElement('style');
style.textContent = `
  @keyframes slideIn {
    from { opacity: 0; transform: translateX(-50%) translateY(-20px); }
    to { opacity: 1; transform: translateX(-50%) translateY(0); }
  }
  
  @keyframes slideOut {
    from { opacity: 1; transform: translateX(-50%) translateY(0); }
    to { opacity: 0; transform: translateX(-50%) translateY(-20px); }
  }
`;
document.head.appendChild(style);
