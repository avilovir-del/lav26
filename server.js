const express = require('express');
const cors = require('cors');
const fs = require('fs');
const path = require('path');
const bcrypt = require('bcryptjs');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.static('.'));

// –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö
const DATA_FILE = path.join(__dirname, 'data.json');

// –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
let dataCache = null;
let lastSaveTime = 0;
const SAVE_DEBOUNCE = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
function loadData() {
  if (dataCache) return dataCache;
  
  try {
    if (fs.existsSync(DATA_FILE)) {
      dataCache = JSON.parse(fs.readFileSync(DATA_FILE, 'utf8'));
      return dataCache;
    }
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ:', error.message);
  }
  
  // –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  dataCache = {
    admin: {
      password: bcrypt.hashSync("admin123", 10)
    },
    users: {},
    tasks: [
      { id: 1, name: "–ü–æ–∫–æ—Ä–º–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", reward: 5, active: true },
      { id: 2, name: "–ü–æ–∏–≥—Ä–∞—Ç—å —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º", reward: 10, active: true },
      { id: 3, name: "–î–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂—É –ø–æ—Å–ø–∞—Ç—å", reward: 8, active: true }
    ],
    shop: [
      { id: 1, name: "üëï –§—É—Ç–±–æ–ª–∫–∞", price: 10, active: true },
      { id: 2, name: "üéÅ –ö—Ä—É–∂–∫–∞", price: 50, active: true }
    ],
    submissions: [],
    purchases: [],
    purchaseRequests: []
  };
  
  return dataCache;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–æ–º
function saveData(data) {
  const now = Date.now();
  if (now - lastSaveTime < SAVE_DEBOUNCE) {
    return; // –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
  }
  
  try {
    fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));
    lastSaveTime = now;
    console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞
function invalidateCache() {
  dataCache = null;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function requireAuth(req, res, next) {
  const token = req.headers.authorization;
  if (token === 'admin') {
    next();
  } else {
    res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }
}

// ======================
// üìä API –î–õ–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// ======================

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ
app.post('/api/initialize-user', (req, res) => {
  const { userId, userName, userContact } = req.body;
  
  const data = loadData();
  
  if (!data.users[userId]) {
    data.users[userId] = {
      lavki: 0,
      registrationDate: new Date().toISOString(),
      completedTasks: 0,
      lastActivity: new Date().toISOString(),
      userName: userName || '–ê–Ω–æ–Ω–∏–º',
      userContact: userContact || '–ù–µ —É–∫–∞–∑–∞–Ω',
      settings: {},
      gameState: {},
      completedTaskIds: [] // –î–û–ë–ê–í–õ–ï–ù–û: —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    };
    saveData(data);
    console.log('üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', userId);
  } else {
    data.users[userId].lastActivity = new Date().toISOString();
    saveData(data);
  }
  
  res.json({ success: true, user: data.users[userId] });
});

// –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
app.get('/api/tasks/:userId', (req, res) => {
  const data = loadData();
  const userId = req.params.userId;
  const user = data.users[userId];
  
  const activeTasks = data.tasks.filter(task => task.active).map(task => {
    const userCompleted = user && user.completedTaskIds ? user.completedTaskIds.includes(task.id) : false;
    const pendingSubmission = data.submissions.find(
      s => s.userId === userId && s.taskId === task.id && s.status === 'pending'
    );
    
    return {
      ...task,
      userCompleted: userCompleted,
      pendingApproval: !!pendingSubmission,
      canSubmit: !userCompleted && !pendingSubmission
    };
  });
  
  res.json(activeTasks);
});

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
app.post('/api/submit-task', (req, res) => {
  const { taskId, photo, userId, userName, userContact } = req.body;
  
  const data = loadData();
  const task = data.tasks.find(t => t.id === taskId);
  const user = data.users[userId];
  
  if (!task) {
    return res.status(404).json({ error: '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
  }

  // –ü–†–û–í–ï–†–ö–ê: –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
  if (user && user.completedTaskIds && user.completedTaskIds.includes(taskId)) {
    return res.status(400).json({ error: '–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ' });
  }

  // –ü–†–û–í–ï–†–ö–ê: –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
  const existingSubmission = data.submissions.find(
    s => s.userId === userId && s.taskId === taskId && s.status === 'pending'
  );
  if (existingSubmission) {
    return res.status(400).json({ error: '–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É' });
  }

  // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!user) {
    data.users[userId] = {
      lavki: 0,
      registrationDate: new Date().toISOString(),
      completedTasks: 0,
      lastActivity: new Date().toISOString(),
      userName: userName || '–ê–Ω–æ–Ω–∏–º',
      userContact: userContact || '–ù–µ —É–∫–∞–∑–∞–Ω',
      settings: {},
      gameState: {},
      completedTaskIds: []
    };
  } else {
    data.users[userId].lastActivity = new Date().toISOString();
    data.users[userId].userName = userName || data.users[userId].userName;
    data.users[userId].userContact = userContact || data.users[userId].userContact;
  }

  // –°–æ–∑–¥–∞–µ–º submission
  const submission = {
    id: Date.now(),
    taskId,
    taskName: task.name,
    userId,
    userName: userName || '–ê–Ω–æ–Ω–∏–º',
    userContact: userContact || '–ù–µ —É–∫–∞–∑–∞–Ω',
    photo,
    reward: task.reward,
    status: 'pending',
    submittedAt: new Date().toISOString()
  };

  data.submissions.push(submission);
  saveData(data);

  res.json({ success: true, message: '–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É' });
});

// –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/:userId/balance', (req, res) => {
  const data = loadData();
  const userId = req.params.userId;
  const user = data.users[userId] || { lavki: 0 };
  res.json({ lavki: user.lavki });
});

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/:userId/purchases', (req, res) => {
  const data = loadData();
  const userId = req.params.userId;
  const userPurchases = (data.purchases || []).filter(p => p.userId === userId);
  
  userPurchases.sort((a, b) => new Date(b.purchasedAt) - new Date(a.purchasedAt));
  
  res.json(userPurchases);
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞
app.get('/api/shop', (req, res) => {
  const data = loadData();
  const activeItems = data.shop.filter(item => item.active);
  res.json(activeItems);
});

// ======================
// üõí API –î–õ–Ø –ü–û–ö–£–ü–û–ö –ò –ó–ê–Ø–í–û–ö
// ======================

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É
app.post('/api/buy-item', (req, res) => {
  const { itemId, itemName, price, userId, userName, userContact } = req.body;
  const data = loadData();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!data.users[userId] || data.users[userId].lavki < price) {
    return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∞–≤–æ–∫' });
  }
  
  // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
  if (!data.purchaseRequests) {
    data.purchaseRequests = [];
  }
  
  const purchaseRequest = {
    id: Date.now(),
    itemId,
    itemName,
    price,
    userId,
    userName: userName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
    userContact: userContact || '–ù–µ —É–∫–∞–∑–∞–Ω',
    status: 'pending',
    requestedAt: new Date().toISOString(),
    processedAt: null
  };
  
  data.purchaseRequests.push(purchaseRequest);
  saveData(data);
  
  res.json({ success: true, message: '–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É' });
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
app.get('/api/admin/purchase-requests', requireAuth, (req, res) => {
  const data = loadData();
  const requests = data.purchaseRequests || [];
  requests.sort((a, b) => new Date(b.requestedAt) - new Date(a.requestedAt));
  res.json(requests);
});

// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É
app.post('/api/admin/purchase-requests/:id/process', requireAuth, (req, res) => {
  const { status, adminNotes } = req.body;
  const requestId = parseInt(req.params.id);
  const data = loadData();
  
  const request = data.purchaseRequests.find(r => r.id === requestId);
  if (!request) {
    return res.status(404).json({ error: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  request.status = status;
  request.processedAt = new Date().toISOString();
  request.adminNotes = adminNotes;
  
  // –ï—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, —Å–ø–∏—Å—ã–≤–∞–µ–º –ª–∞–≤–∫–∏ –∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–∫—É–ø–∫—É
  if (status === 'approved' && data.users[request.userId]) {
    if (data.users[request.userId].lavki >= request.price) {
      data.users[request.userId].lavki -= request.price;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫
      if (!data.purchases) {
        data.purchases = [];
      }
      data.purchases.push({
        id: Date.now(),
        itemId: request.itemId,
        itemName: request.itemName,
        price: request.price,
        userId: request.userId,
        userName: request.userName,
        purchasedAt: new Date().toISOString()
      });
    }
  }
  
  saveData(data);
  res.json({ success: true, message: `–ó–∞—è–≤–∫–∞ ${status === 'approved' ? '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'}` });
});

// ======================
// üîÑ –ü–†–û–í–ï–†–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ù–´–• –ó–ê–î–ê–ù–ò–ô
// ======================

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/:userId/approved-tasks', (req, res) => {
  const userId = req.params.userId;
  const data = loadData();
  
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const approvedSubmissions = data.submissions.filter(
    s => s.userId === userId && s.status === 'approved' && !s.processed
  );
  
  // –û—Ç–º–µ—á–∞–µ–º –∏—Ö –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
  const newApprovedTasks = [];
  approvedSubmissions.forEach(submission => {
    newApprovedTasks.push({
      taskId: submission.taskId,
      taskName: submission.taskName,
      reward: submission.reward
    });
    submission.processed = true;
    
    // –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (data.users[userId]) {
      if (!data.users[userId].completedTaskIds) {
        data.users[userId].completedTaskIds = [];
      }
      if (!data.users[userId].completedTaskIds.includes(submission.taskId)) {
        data.users[userId].completedTaskIds.push(submission.taskId);
      }
      data.users[userId].completedTasks = (data.users[userId].completedTasks || 0) + 1;
    }
  });
  
  saveData(data);
  res.json(newApprovedTasks);
});

// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/:userId/rejected-tasks', (req, res) => {
  const userId = req.params.userId;
  const data = loadData();
  
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const rejectedSubmissions = data.submissions.filter(
    s => s.userId === userId && s.status === 'rejected' && !s.userNotified
  );
  
  // –û—Ç–º–µ—á–∞–µ–º –∏—Ö –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
  const rejectedTasks = [];
  rejectedSubmissions.forEach(submission => {
    rejectedTasks.push({
      taskId: submission.taskId,
      taskName: submission.taskName,
      rejectionReason: submission.rejectionReason || '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑'
    });
    submission.userNotified = true;
  });
  
  saveData(data);
  res.json(rejectedTasks);
});

// ======================
// üë• API –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
// ======================

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/admin/users', requireAuth, (req, res) => {
  const data = loadData();
  
  const users = Object.entries(data.users).map(([userId, userData]) => ({
    id: userId,
    lavki: userData.lavki || 0,
    registrationDate: userData.registrationDate || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
    completedTasks: userData.completedTasks || 0,
    lastActivity: userData.lastActivity || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
    userName: userData.userName || '–ê–Ω–æ–Ω–∏–º',
    userContact: userData.userContact || '–ù–µ —É–∫–∞–∑–∞–Ω',
    completedTaskIds: userData.completedTaskIds || []
  }));
  
  res.json(users);
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
app.get('/api/admin/users/:userId', requireAuth, (req, res) => {
  const data = loadData();
  const userId = req.params.userId;
  
  const user = data.users[userId];
  if (!user) {
    return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  const userSubmissions = data.submissions.filter(s => s.userId === userId);
  const userPurchases = (data.purchases || []).filter(p => p.userId === userId);
  const userRequests = (data.purchaseRequests || []).filter(r => r.userId === userId);
  
  const userInfo = {
    id: userId,
    lavki: user.lavki || 0,
    registrationDate: user.registrationDate || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
    completedTasks: user.completedTasks || 0,
    lastActivity: user.lastActivity || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
    userName: user.userName || '–ê–Ω–æ–Ω–∏–º',
    userContact: user.userContact || '–ù–µ —É–∫–∞–∑–∞–Ω',
    completedTaskIds: user.completedTaskIds || [],
    totalSubmissions: userSubmissions.length,
    approvedSubmissions: userSubmissions.filter(s => s.status === 'approved').length,
    pendingSubmissions: userSubmissions.filter(s => s.status === 'pending').length,
    rejectedSubmissions: userSubmissions.filter(s => s.status === 'rejected').length,
    totalPurchases: userPurchases.length,
    totalRequests: userRequests.length,
    submissions: userSubmissions,
    purchases: userPurchases
  };
  
  res.json(userInfo);
});

// –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.put('/api/admin/users/:userId/balance', requireAuth, (req, res) => {
  const { lavki } = req.body;
  const userId = req.params.userId;
  const data = loadData();
  
  if (!data.users[userId]) {
    return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  data.users[userId].lavki = parseInt(lavki);
  saveData(data);
  
  res.json({ success: true, message: '–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω' });
});

// –°–±—Ä–æ—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/admin/users/:userId/reset', requireAuth, (req, res) => {
  const userId = req.params.userId;
  const data = loadData();
  
  if (!data.users[userId]) {
    return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  data.users[userId].lavki = 0;
  data.users[userId].completedTasks = 0;
  data.users[userId].lastActivity = new Date().toISOString();
  data.users[userId].settings = {};
  data.users[userId].gameState = {};
  data.users[userId].completedTaskIds = [];
  
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ submissions –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  data.submissions = data.submissions.filter(s => s.userId !== userId);
  
  // –£–¥–∞–ª—è–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (data.purchases) {
    data.purchases = data.purchases.filter(p => p.userId !== userId);
  }
  
  // –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (data.purchaseRequests) {
    data.purchaseRequests = data.purchaseRequests.filter(r => r.userId !== userId);
  }
  
  saveData(data);
  
  res.json({ success: true, message: '–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–±—Ä–æ—à–µ–Ω' });
});

// ======================
// üíæ –ü–û–õ–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
// ======================

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/user/:userId/state', (req, res) => {
  const { state } = req.body;
  const userId = req.params.userId;
  const data = loadData();
  
  if (!data.users[userId]) {
    data.users[userId] = {
      lavki: 0,
      registrationDate: new Date().toISOString(),
      completedTasks: 0,
      lastActivity: new Date().toISOString(),
      userName: '–ê–Ω–æ–Ω–∏–º',
      userContact: '–ù–µ —É–∫–∞–∑–∞–Ω',
      settings: {},
      gameState: {},
      completedTaskIds: []
    };
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  data.users[userId].gameState = { 
    ...data.users[userId].gameState, 
    ...state 
  };
  data.users[userId].lastActivity = new Date().toISOString();
  data.users[userId].lavki = state.lavki !== undefined ? state.lavki : data.users[userId].lavki;
  
  saveData(data);
  res.json({ success: true, state: data.users[userId].gameState });
});

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/:userId/state', (req, res) => {
  const data = loadData();
  const userId = req.params.userId;
  
  const user = data.users[userId];
  if (!user) {
    return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  res.json({
    lavki: user.lavki || 0,
    settings: user.settings || {},
    gameState: user.gameState || {},
    completedTasks: user.completedTasks || 0,
    completedTaskIds: user.completedTaskIds || [],
    registrationDate: user.registrationDate
  });
});

// ======================
// üîß API –î–õ–Ø –ê–î–ú–ò–ù–ö–ò
// ======================

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ
app.post('/api/admin/login', (req, res) => {
  const { password } = req.body;
  const data = loadData();
  
  if (bcrypt.compareSync(password, data.admin.password)) {
    res.json({ success: true, token: 'admin' });
  } else {
    res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
  }
});

// –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞
app.post('/api/admin/change-password', requireAuth, (req, res) => {
  const { newPassword } = req.body;
  const data = loadData();
  
  data.admin.password = bcrypt.hashSync(newPassword, 10);
  saveData(data);
  
  res.json({ success: true, message: '–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω' });
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ submissions
app.get('/api/admin/submissions', requireAuth, (req, res) => {
  const data = loadData();
  res.json(data.submissions);
});

// –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
app.post('/api/admin/submissions/:id/approve', requireAuth, (req, res) => {
  const submissionId = parseInt(req.params.id);
  const data = loadData();
  
  const submission = data.submissions.find(s => s.id === submissionId);
  if (!submission) {
    return res.status(404).json({ error: 'Submission –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
  submission.status = 'approved';
  submission.reviewedAt = new Date().toISOString();
  submission.processed = false;
  
  // –ù–∞—á–∏—Å–ª—è–µ–º –ª–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const userId = submission.userId;
  if (!data.users[userId]) {
    data.users[userId] = { 
      lavki: 0,
      completedTasks: 0,
      registrationDate: new Date().toISOString(),
      settings: {},
      gameState: {},
      completedTaskIds: []
    };
  }
  data.users[userId].lavki += submission.reward;
  data.users[userId].completedTasks = (data.users[userId].completedTasks || 0) + 1;
  data.users[userId].lastActivity = new Date().toISOString();
  
  // –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
  if (!data.users[userId].completedTaskIds) {
    data.users[userId].completedTaskIds = [];
  }
  if (!data.users[userId].completedTaskIds.includes(submission.taskId)) {
    data.users[userId].completedTaskIds.push(submission.taskId);
  }
  
  saveData(data);
  res.json({ 
    success: true, 
    message: '–ó–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
    userNotified: false
  });
});

// –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
app.post('/api/admin/submissions/:id/reject', requireAuth, (req, res) => {
  const submissionId = parseInt(req.params.id);
  const data = loadData();
  
  const submission = data.submissions.find(s => s.id === submissionId);
  if (!submission) {
    return res.status(404).json({ error: 'Submission –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
  const { rejectionReason } = req.body;
  
  submission.status = 'rejected';
  submission.reviewedAt = new Date().toISOString();
  submission.rejectionReason = rejectionReason || '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑';
  submission.userNotified = false;
  
  saveData(data);
  res.json({ success: true, message: '–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ' });
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏
app.get('/api/admin/tasks', requireAuth, (req, res) => {
  const data = loadData();
  res.json(data.tasks);
});

app.post('/api/admin/tasks', requireAuth, (req, res) => {
  const { name, reward } = req.body;
  const data = loadData();
  
  const newTask = {
    id: Date.now(),
    name,
    reward: parseInt(reward),
    active: true
  };
  
  data.tasks.push(newTask);
  saveData(data);
  
  res.json({ success: true, task: newTask });
});

app.put('/api/admin/tasks/:id', requireAuth, (req, res) => {
  const taskId = parseInt(req.params.id);
  const { name, reward, active } = req.body;
  const data = loadData();
  
  const task = data.tasks.find(t => t.id === taskId);
  if (task) {
    if (name !== undefined) task.name = name;
    if (reward !== undefined) task.reward = parseInt(reward);
    if (active !== undefined) task.active = active;
    
    saveData(data);
    res.json({ success: true, task });
  } else {
    res.status(404).json({ error: '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
  }
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º
app.get('/api/admin/shop', requireAuth, (req, res) => {
  const data = loadData();
  res.json(data.shop);
});

app.post('/api/admin/shop', requireAuth, (req, res) => {
  const { name, price } = req.body;
  const data = loadData();
  
  const newItem = {
    id: Date.now(),
    name,
    price: parseInt(price),
    active: true
  };
  
  data.shop.push(newItem);
  saveData(data);
  
  res.json({ success: true, item: newItem });
});

app.put('/api/admin/shop/:id', requireAuth, (req, res) => {
  const itemId = parseInt(req.params.id);
  const { name, price, active } = req.body;
  const data = loadData();
  
  const item = data.shop.find(i => i.id === itemId);
  if (item) {
    if (name !== undefined) item.name = name;
    if (price !== undefined) item.price = parseInt(price);
    if (active !== undefined) item.active = active;
    
    saveData(data);
    res.json({ success: true, item });
  } else {
    res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫
app.get('/api/admin/purchases', requireAuth, (req, res) => {
  const data = loadData();
  res.json(data.purchases || []);
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
app.get('/api/admin/stats', requireAuth, (req, res) => {
  const data = loadData();
  
  const users = Object.values(data.users);
  const activeUsers = users.filter(user => {
    if (!user.lastActivity) return false;
    const lastActivity = new Date(user.lastActivity);
    const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
    return lastActivity > weekAgo;
  });
  
  const purchaseRequests = data.purchaseRequests || [];
  const pendingRequests = purchaseRequests.filter(r => r.status === 'pending');
  
  const stats = {
    totalUsers: users.length,
    activeUsers: activeUsers.length,
    totalSubmissions: data.submissions.length,
    pendingSubmissions: data.submissions.filter(s => s.status === 'pending').length,
    rejectedSubmissions: data.submissions.filter(s => s.status === 'rejected').length,
    totalLavki: users.reduce((sum, user) => sum + (user.lavki || 0), 0),
    activeTasks: data.tasks.filter(t => t.active).length,
    activeShopItems: data.shop.filter(i => i.active).length,
    totalPurchases: (data.purchases || []).length,
    totalPurchaseRequests: purchaseRequests.length,
    pendingPurchaseRequests: pendingRequests.length
  };
  
  res.json(stats);
});

// –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

app.get('/admin', (req, res) => {
  res.sendFile(path.join(__dirname, 'admin.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use((req, res) => {
  res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
  console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
  res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:${PORT}`);
  console.log(`üìä –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost:${PORT}/admin`);
  console.log(`üîë –ü–∞—Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: admin123`);
  console.log(`üíæ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: ${DATA_FILE}`);
});

module.exports = app;
